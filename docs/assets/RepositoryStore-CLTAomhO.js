import{C as R,E as h,H as a}from"./index-BqvE5ap6.js";import{u as T}from"./RepositoriesStore-DGkIFid6.js";const S=R("repository",()=>{const o=h({}),t=T();async function u(e){await t.fetchRepositories();const s=t.repositories.find(r=>r.id===e);s?o.value=s:console.error("Repository not found")}async function l(e,s){o.value.name=e,o.value.description=s}async function c(e,s){o.value.users.push({email:e,role:s})}async function p(e){const s=e.map(r=>r.email);o.value.users=o.value.users.filter(r=>r.role==="owner"||!s.includes(r.email))}async function d(e){o.value.users=o.value.users.filter(s=>s.role!=="owner"),o.value.users.push({email:e,role:"owner"})}async function v(){await t.deleteRepository(o.value.id)}const m=a(()=>o.value.users.find(e=>e.role==="owner")),f=a(()=>{const e=o.value.versions;return e.length===0?null:e.reduce((r,n)=>{const i=new Date(n.uploadTime),w=new Date(r.uploadTime);return i>w?n:r},e[0]).version}),y=a(()=>{if(!o.value.versions)return;const r=o.value.versions.sort((n,i)=>new Date(i.uploadTime)-new Date(n.uploadTime)).map(n=>({name:`Version ${n.version}`,value:n.version,uploader:n.uploader,uploadTime:n.uploadTime,version:n.version}));return r.unshift({name:"Latest Version",value:"latest"}),r});return{repository:o,fetchRepositoryById:u,modifyRepository:l,shareRepository:c,unshareRepository:p,owner:m,changeOwnership:d,deleteRepository:v,lastVersion:f,versions:y}});export{S as u};
